#######chek for source and Destination entries are correct.


echo  "Enter the REQ/CHG No. "
read snt


# Below steps are take source and destination servers and FID's details
echo "Checking source and destination list count matches"

SSs=$(wc -l < Sserver_list)
DSs=$(wc -l < Dserver_list)
SFs=$(wc -l < SFid_list)
DFs=$(wc -l < DFid_list)


if [[ $SSs -eq $DSs && $DSs -eq $SFs && $SFs -eq $DFs ]]; then 
    echo "Lines are matched"
    echo "Total number of lines: $SSs"



############pre checkouts

paste -d$'\t' SFid_list Sserver_list DFid_list Dserver_list | tee out

> dep_connect

cat out | while read SF SS DF DS
do
echo

ssh -Bqn $SS "su - $SF -c 'echo bye | sftp $DF@$DS'" 2>/dev/null

if [[ $? == 0 ]]; then
 echo "Source $SS FID $SF key is connected successful on Destination $DS server FID $DF"

else

 echo "Source $SS FID $SF key is connected Fail on Destination $DS server FID $DF"
    echo " $SF ' ' $SS ' ' $DF ' ' $DS" >> dep_connect
fi

done

########source check/generate


#!/usr/bin/ksh
#To check/generate the source servers FID's keys and copy to admin location.
    #
    echo " Source "
    echo " FID    |   server "
    echo "--------------------"
    #paste -d$'\t' SFid_list Sserver_list | tee out
    cat dep_connect | awk '{print $1 "   " $2}'

    echo
    echo "Check Source FID's and server's are match?"
    select yn in "Yes" "No"; do
    case $yn in
        [Yy]* )

    > status

        cat dep_connect | while read a b
        do
        echo
        echo "Checking Source server FID pub key present or not......"
        echo "a = $a"
        echo "b = $b"
        echo
        ssh -Bqn $b "test -e /etc/opt/SSHtectia/keys/$a"
            if [[ $? == 0 ]]; then
                ssh -Bqn $b " grep -i $a@$b  /etc/opt/SSHtectia/keys/$a/*.pub " | awk -F':' '{print $1}'  2>/dev/null
                    if [[ $? == 0 ]]; then
                    echo
                        echo " Copying source server $a fid Pub key....... "
                        echo
                        Pres=`ssh -Bqn $b "grep -i $a@$b  /etc/opt/SSHtectia/keys/$a/*.pub "  | awk -F':' '{print $1}'`
                        scp -Bq $b:$Pres /var/tmp/dep_keys/test/$a@$b.pub
                        echo "Success $a Key from $b server copied to admin location `ls /var/tmp/dep_keys/test/$a@$b*` "  >> status
                    else 
                        echo
                        echo "Fail $a PUB key not present on $b server"   >> status
                        exit;                               
                    fi
            else
            ssh -Bqn $b " id $a" 2>/dev/null
                if [[ $? == 0 ]]; then
                    echo " Pub key not present on server"
                    echo " Press y for generate key , n for not to generate key"
                    read gen
                    if [[ $gen == y ]]; then
                        ssh -Bqn $b "echo $b; | /opt/SSHtectia/util/generate_keys $a" 
                        ssh -Bqn $b " grep -i $a@$b  /etc/opt/SSHtectia/keys/$a/*.pub " | awk -F':' '{print $1}'  2>/dev/null
                        if [[ $? == 0 ]]; then
                            Pres=`ssh -Bqn $b "grep -i $a@$b  /etc/opt/SSHtectia/keys/$a/*.pub "  | awk -F':' '{print $1}'`
                            scp $b:$Pres /var/tmp/dep_keys/test
                            echo "Success $a Key from $b server copied to admin location `ls /var/tmp/dep_keys/test/$a@$b*` "   >> status
                        fi
                    else 
                    echo
                        echo "Fail $a key not generate on $b server" >> status
                        exit;
                    fi
                else
                echo
                    echo "Fail $a FID not present on $b server" >> status
                    exit;   
                fi
            fi
        done 
        echo
        echo
    grep --color=auto -E 'Fail|' status 
    echo
    echo "Success and Failed Count's on source pub keys copy"
    echo "----------------------------------------------------"
    echo " Success count ==> `grep -i Success status|wc -l`"
    echo " Failed  count ==> `grep -i Fail status|wc -l`"
    ##############  exit;; or ####### break ;;
        ;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;

    esac
done

########Authorization creation


echo " Source "
    echo " FID    |   server "
    echo "--------------------"
    #paste -d$'\t' SFid_list Sserver_list | tee out
    cat dep_connect | awk '{print $1 "   " $2}'

    echo "Keys in Admin location"
    ls *pub| tr ' ' '\n'

    echo
    echo "Check Source FID's and server's are match?"
    select yn in "Yes" "No"; do
    case $yn in
        [Yy]* )

            cat dep_connect | while read SF SS
            do
            echo
            echo  "Creating Map Entries                 ... "
            echo "" > /var/tmp/dep_keys/test/$SF@$SS'_authfile'
            echo "# $snt" >> /var/tmp/dep_keys/test/$SF@$SS'_authfile'
            SK=`ls -l /var/tmp/dep_keys/test/$SF@$SS.pub|awk '{print $NF}'|awk -F/ '{print $NF}'`
                echo "Key $SK" >> /var/tmp/dep_keys/test/$SF@$SS'_authfile'
                dhost=`echo $SK|awk -F@ '{print $NF}'|awk -F. '{print $1}'`
                dn=`nslookup $dhost|grep Name|awk '{print $NF}'`
                dnip=`nslookup $dhost|grep Address|tail -1|awk '{print $NF}'`
                if [[ ! -n $dn  ]]; then
                        dn=`nslookup $dhost.eur.nsroot.net|grep Name|awk '{print $NF}'`
                        dnip=`nslookup $dhost.eur.nsroot.net|grep Address|tail -1|awk '{print $NF}'`
                fi
                if [[ ! -n $dn ]]; then
                        dn=`nslookup $dhost.apac.nsroot.net|grep Name|awk '{print $NF}'`
                        dnip=`nslookup $dhost.apac.nsroot.net|grep Address|tail -1|awk '{print $NF}'`
                fi
                if [[ ! -n $dn ]]; then
                        dn=`nslookup $dhost.jpn.nsroot.net|grep Name|awk '{print $NF}'`
                        dnip=`nslookup $dhost.jpn.nsroot.net|grep Address|tail -1|awk '{print $NF}'`
                fi
                if [[ ! -n $dn ]]; then
                        dn=`nslookup $dhost.ap.ssmb.com|grep Name|awk '{print $NF}'`
                        dnip=`nslookup $dhost.ap.ssmb.com|grep Address|tail -1|awk '{print $NF}'`
                fi
                    echo "Options command=\"eval \$SSH_ORIGINAL_COMMAND\",allow-from=\"$dn|$dnip\"" >> /var/tmp/dep_keys/test/$SF@$SS'_authfile'
                echo "Ok"
            done
#           echo "### Below entries will be appended on target authorization file ###"
#           echo
#           echo "-------------------------------------------------------------------"
#           cat /var/tmp/dep_keys/test/$SF@$SS'_authfile'
#           echo "-------------------------------------------------------------------"
#           echo
            ;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;

    esac
done

##########Destination check/generate

#paste -d$'\t' SFid_list Sserver_list DFid_list Dserver_list | tee out


cat dep_connect | while read SF SS DF DS
do
echo

ssh -Bqn $DS "test -e /etc/opt/SSHtectia/keys/$DF"
if [[ $? == 0 ]]; then
    ssh -Bqn $DS "cat /etc/opt/SSHtectia/keys/$DF/*.pub" |grep -i $SF@$SS 2>/dev/null
    if [[ $? == 0 ]]; then
    #dup="true"
        echo "Source key already present on Destination server."
    else
    #dup="false"
    ssh -Bqn $DS "test -e /etc/opt/SSHtectia/keys/$DF/authorization"
        if [[ $? == 0 ]]; then
            ssh -Bqn $DS "cp /etc/opt/SSHtectia/keys/$DF/authorization /etc/opt/SSHtectia/keys/$DF/authorization.`date '+%Y%m%d'`_`date '+%H%M'`" 2>/dev/null
            scp -Bqn /var/tmp/dep_keys/test/$SF@$SS.pub $DS:/etc/opt/SSHtectia/keys/$DF/$SF@$SS.pub
            cat /var/tmp/dep_keys/test/$SF@$SS'_authfile' | ssh -Bqn $DS "cat >> /etc/opt/SSHtectia/keys/$DF/authorization" 2>/dev/null
            echo  "Updating Authorization file          ... "
            echo " Ok "
        else    
            echo "Source entry already present on Destination server."
        fi
    fi
else    
    echo "Destnation server FID not generate"
    ssh -Bqn $DS "id $DF" 2>/dev/null
    if [[ $? == 0 ]]; then
        echo " Pub key not present on server"
        echo " Press y for generate key , n for not to generate key"
        read gen
        if [[ $gen == y ]]; then
            ssh -Bqn $DS "echo $DS; | /opt/SSHtectia/util/generate_keys $DF" 
            echo "key generated and deployed"
            ssh -Bqn $DS "test -e /etc/opt/SSHtectia/keys/$DF"
            if [[ $? == 0 ]]; then
                ssh -Bqn $DS "cp /etc/opt/SSHtectia/keys/$DF/authorization /etc/opt/SSHtectia/keys/$DF/authorization.`date '+%Y%m%d'`_`date '+%H%M'`" 2>/dev/null
                scp -Bqn /var/tmp/dep_keys/test/$SF@$SS.pub $DS:/etc/opt/SSHtectia/keys/$DF/$SF@$SS.pub
                cat /var/tmp/dep_keys/test/$SF@$SS'_authfile' | ssh -Bqn $DS "cat >> /etc/opt/SSHtectia/keys/$DF/authorization" 2>/dev/null
                echo  "Updating Authorization file          ... "
                echo " Ok "
            fi
        else 
        echo
            echo "Fail $DF key not generate on $DS server" >> status
        fi
    else
    echo
        echo "Fail $DF FID not present on $DS server" >> status
    fi

fi      
done

##############post checkouts


paste -d$'\t' SFid_list Sserver_list DFid_list Dserver_list | tee out

cat out | while read SF SS DF DS
do
echo

ssh -Bqn $SS "su - $SF -c 'echo bye | sftp $DF@$DS'" 2>/dev/null

if [[ $? == 0 ]]; then
 echo "Source $SS FID $SF key is connected successful on Destination $DS server FID $DF"
else

 echo "Source $SS FID $SF key is connected Fail on Destination $DS server FID $DF"
fi

done


#######if source and Destination entries are not correct.

else
   echo "Line are miss matched"
   echo "Number of lines $SS = $DS = $SF = $DF"
fi